cmake_minimum_required(VERSION 3.5)
project(cyder)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_FLAGS "-stdlib=libc++ ")
set(CMAKE_OSX_DEPLOYMENT_TARGET 10.9)


file(GLOB_RECURSE SOURCE_FILES src/*.cpp src/*.cc src/*.c src/*.h src/*.mm src/*.m)

function(remove_srcs)
    file(GLOB_RECURSE to_remove ${ARGN})
    if (NOT "${to_remove}" STREQUAL "")
        list(REMOVE_ITEM SOURCE_FILES ${to_remove})
        set(SOURCE_FILES ${SOURCE_FILES} PARENT_SCOPE)
    endif ()
endfunction()

if (APPLE)
    set(OS_ARCH darwin-x64)
    add_definitions(-DOS_MACOS)
    add_definitions(-DOS_POSIX)
    remove_srcs(src/platform/win/*.*)
    remove_srcs(src/platform/linux/*.*)
elseif (WIN32)
    set(OS_ARCH win-ia32)
    add_definitions(-DOS_WIN)
    remove_srcs(src/platform/mac/*.*)
    remove_srcs(src/platform/linux/*.*)
    remove_srcs(src/platform/posix/*.*)
else ()
    set(OS_ARCH linux-x32)
    add_definitions(-DOS_LINUX)
    add_definitions(-DOS_POSIX)
    remove_srcs(src/platform/mac/*.*)
    remove_srcs(src/platform/win/*.*)
endif ()

if (CMAKE_BUILD_TYPE STREQUAL Release)
    add_definitions(-DNO_DEBUG)
endif ()

#if (CMAKE_BUILD_TYPE STREQUAL Release)
#    set(LIB_TYPE static)
#else ()
set(LIB_TYPE shared)
#endif ()
set(LIB_ARCH ${OS_ARCH}-${LIB_TYPE})


function(find_include_dirs out)
    file(GLOB_RECURSE headers ${ARGN})
    foreach (path ${headers})
        get_filename_component(dir ${path} PATH)
        list(APPEND include_dirs ${dir})
    endforeach ()
    list(REMOVE_DUPLICATES include_dirs)
    set(${out} ${include_dirs} PARENT_SCOPE)
endfunction()

find_include_dirs(includes third_party/skia/include/*.h third_party/v8/include/*.h)
include_directories(${includes} src)

find_library(APPLICATION_SERVICES_FRAMEWORK ApplicationServices REQUIRED)
list(APPEND libs ${APPLICATION_SERVICES_FRAMEWORK})
find_library(A_G_L AGL REQUIRED)
list(APPEND libs ${A_G_L})
find_library(OPENGL OpenGL REQUIRED)
list(APPEND libs ${OPENGL})
find_library(QUARTZ_CORE QuartzCore REQUIRED)
list(APPEND libs ${QUARTZ_CORE})
find_library(COCOA Cocoa REQUIRED)
list(APPEND libs ${COCOA})
find_library(FOUNDATION Foundation REQUIRED)
list(APPEND libs ${FOUNDATION})

set(RESOURCE_FILES)

function(copy_file from to)
    list(APPEND RESOURCE_FILES ${to})
    set(RESOURCE_FILES ${RESOURCE_FILES} PARENT_SCOPE)
    add_custom_command(OUTPUT ${to}
            COMMAND ${CMAKE_COMMAND} -E copy ${from} ${to}
            MAIN_DEPENDENCY ${from})
endfunction()

set(skia_lib)
if (LIB_TYPE STREQUAL static)
    file(GLOB_RECURSE skia_lib third_party/skia/${LIB_ARCH}/*.a)
else ()
    file(GLOB_RECURSE skia_lib third_party/skia/${LIB_ARCH}/*.dylib third_party/skia/${LIB_ARCH}/*.so)
    foreach (path ${skia_lib})
        get_filename_component(fileName ${path} NAME)
        copy_file(${path} ${CMAKE_BINARY_DIR}/${fileName})
    endforeach ()
endif ()

set(v8_lib)
if (LIB_TYPE STREQUAL static)
    file(GLOB_RECURSE v8_lib third_party/v8/${LIB_ARCH}/*.a)
else ()
    file(GLOB_RECURSE v8_lib third_party/v8/${LIB_ARCH}/*.dylib third_party/v8/${LIB_ARCH}/*.so)
    foreach (path ${v8_lib})
        get_filename_component(fileName ${path} NAME)
        copy_file(${path} ${CMAKE_BINARY_DIR}/${fileName})
    endforeach ()
endif ()

#copy all files in "resource/" to the binary dir.
file(GLOB FILES resource/*.*)
foreach (path ${FILES})
    get_filename_component(fileName ${path} NAME)
    copy_file(${path} ${CMAKE_BINARY_DIR}/${fileName})
endforeach ()

#copy natives_blob.bin and snapshot_blob.bin which v8 requires to the root of binary dir.
copy_file(${CMAKE_SOURCE_DIR}/third_party/v8/${LIB_ARCH}/natives_blob.bin ${CMAKE_BINARY_DIR}/natives_blob.bin)
copy_file(${CMAKE_SOURCE_DIR}/third_party/v8/${LIB_ARCH}/snapshot_blob.bin ${CMAKE_BINARY_DIR}/snapshot_blob.bin)
copy_file(${CMAKE_SOURCE_DIR}/javascript/built/main.js ${CMAKE_BINARY_DIR}/main.js)
copy_file(${CMAKE_SOURCE_DIR}/javascript/built/test.js ${CMAKE_BINARY_DIR}/test.js)

add_custom_target(Resources ALL DEPENDS ${RESOURCE_FILES})

link_directories(${CMAKE_BINARY_DIR})

add_executable(cyder ${SOURCE_FILES})
target_link_libraries(cyder ${skia_lib} ${v8_lib} ${libs})